"""
load_util.py

Summary of the dataset: The polypus vocal detection dataset
                        Two types: abnormal and normal
                        Two test cases: vowel /a:/ and vowel /i:/
                        
Description of the dataset: (download link: )
No. of patients: 12 (4 with polypus, 8 without)
Age range: 21-50
samples range: 1157200-1344000
channels: 1
sample rate: 192000
bits per samples: 32
normalized data: FAlSE

Input: abnormal_a2.mat, normal_a2.mat, abnormal_i1.mat, normal_i1.mat

Output: param_STFT, param_MFCC, param_scipy_STFT

Remark: The STFT and MFCC generated by MATLAB and python scipy may be different. It's better for you
to keep consensus for only one of them. I just provide all the avaiable options.

"""

import scipy.io as sio
import numpy as np
import matplotlib.pyplot as plt
from scipy import signal
from python_speech_features import mfcc
from python_speech_features import logfbank

# initializing parameters

fs = 192000        # sampling frequency
nfft = 2048        # No. of fft points
lowfreq = 20       # frequency range [20, 20000] Hz
highfreq = 20000


def load_spec_data():
      """
      load spectrogram data (generated by MATLAB speech_RNN.m)
      """
      S_normal_a2 = sio.loadmat('spec_normal_a2.mat')
      S_normal_a2 = S_normal_a2["spec_normal_a2"]

      S_abnormal_a2 = sio.loadmat('spec_abnormal_a2.mat')
      S_abnormal_a2 = S_abnormal_a2["spec_abnormal_a2"]

      S_normal_i1 = sio.loadmat('spec_normal_i1.mat')
      S_normal_i1 = S_normal_i1["spec_normal_i1"]

      S_abnormal_i1 = sio.loadmat('spec_abnormal_i1.mat')
      S_abnormal_i1 = S_abnormal_i1["spec_abnormal_i1"]

      # Data clipping and alignment
      S_normal_a2 = np.abs(S_normal_a2[:, :13500])
      S_abnormal_a2 = np.abs(S_abnormal_a2[:, :13500])
      S_normal_i1 = np.abs(S_normal_i1[:, :13500])
      S_abnormal_i1 = np.abs(S_abnormal_i1[:, :13500])

      # Normalization along the column
      S_normal_a2_mean = S_normal_a2 - S_normal_a2.mean(axis = 0)
      S_normal_a2_std = S_normal_a2.std(axis = 0)
      S_normal_a2 = (S_normal_a2 - S_normal_a2_mean) /S_normal_a2_std

      S_abnormal_a2_mean = S_abnormal_a2 - S_abnormal_a2.mean(axis=0)
      S_abnormal_a2_std = S_abnormal_a2.std(axis=0)
      S_abnormal_a2 /= (S_abnormal_a2 - S_abnormal_a2_mean) / S_abnormal_a2_std

      S_normal_i1_mean = S_normal_i1 - S_normal_i1.mean(axis=0)
      S_normal_i1_std = S_normal_i1.std(axis=0)
      S_normal_i1 /= (S_normal_i1 - S_normal_i1_mean) / S_normal_i1_std

      S_abnormal_i1_mean = S_abnormal_i1 - S_abnormal_i1.mean(axis=0)
      S_abnormal_i1_std = S_abnormal_i1.std(axis=0)
      S_abnormal_i1 = (S_abnormal_i1 - S_abnormal_i1_mean) / S_abnormal_i1_std

      param_STFT = {"S_normal_a2": S_normal_a2,
                  "S_abnormal_a2": S_abnormal_a2,
                  "S_normal_i1": S_normal_i1,
                  "S_abnormal_i1": S_abnormal_i1,
                  }

      return param_STFT

"""
MFCC features
"""
def MFCC_vocal(S_normal_a2, S_abnormal_a2, S_normal_i1, S_abnormal_i1):

      mfcc_normal_a2 = mfcc(S_normal_a2, fs, lowfreq, highfreq, nfft)
      fbank_normal_a2 = logfbank(S_normal_a2, fs, lowfreq, highfreq, nfft)

      mfcc_abnormal_a2 = mfcc(S_abnormal_a2, fs, lowfreq, highfreq, nfft)
      fbank_abnormal_a2 = logfbank(S_abnormal_a2, fs, lowfreq, highfreq, nfft)

      mfcc_normal_i1 = mfcc(S_normal_i1, fs, lowfreq, highfreq, nfft)
      fbank_normal_i1 = logfbank(S_normal_i1, fs, lowfreq, highfreq, nfft)

      mfcc_abnormal_i1 = mfcc(S_abnormal_i1, fs, lowfreq, highfreq, nfft)
      fbank_abnormal_i1 = logfbank(S_abnormal_i1, fs, lowfreq, highfreq, nfft)

      print(fbank_normal_a2[1:3,:], '\n',
            fbank_abnormal_a2[1:3, :], '\n',
            fbank_normal_i1[1:3, :], '\n',
            fbank_abnormal_i1[1:3, :])

      param_MFCC = {"mfcc_normal_a2" : mfcc_normal_a2,
                "mfcc_abnormal_a2": mfcc_abnormal_a2,
                "mfcc_normal_i1": mfcc_normal_i1,
                "mfcc_abnormal_i1": mfcc_abnormal_i1,
                "fbank_normal_a2": fbank_normal_a2,
                "fbank_abnormal_a2": fbank_abnormal_a2,
                "fbank_normal_i1": fbank_normal_i1,
                "fbank_abnormal_i1": fbank_abnormal_i1,
                }

      return param_MFCC


def stft_vocal():

      """
      STFT spectrogram for data preprocessing
      Remark: choose rectangular window: scipy 'boxcar'
      """
      # vowel /a:/

      abnormal_a2 = sio.loadmat('abnormal_a2.mat')
      abnormal_a2 = abnormal_a2["AA"]     # extract the data from the dictionary and transform to numpy array
      abnormal_a2 = np.squeeze(abnormal_a2, 1)
      normal_a2 = sio.loadmat('normal_a2.mat')
      normal_a2 = normal_a2["AA"]
      normal_a2 = np.squeeze(normal_a2, 1)

      # vowel /i:/
      abnormal_i1 = sio.loadmat('abnormal_i1.mat')
      abnormal_i1 = abnormal_i1["AA"]
      abnormal_i1 = np.squeeze(abnormal_i1, 1)
      normal_i1 = sio.loadmat('normal_i1.mat')
      normal_i1 = normal_i1["AA"]
      normal_i1 = np.squeeze(normal_i1, 1)

      print("normal vowel /a:/ shape = ", normal_a2.shape, '\n',
            "abormal vowel /a:/ shape = ", abnormal_a2.shape, '\n',
            "normal vowel /i:/ shape = ", normal_i1.shape, '\n',
            "abnormal vowel /i:/ shape = ", normal_a2.shape, '\n', normal_a2.T.shape)

      rect = signal.boxcar(nfft, sym=False)

      f_normal_a2, t_normal_a2, S_normal_a2 = signal.spectrogram(normal_a2.T, fs, window = 'boxcar', nperseg = 2048,
                                                                 nfft = 2048, noverlap = None)
      f_abnormal_a2, t_abnormal_a2, S_abnormal_a2 = signal.spectrogram(abnormal_a2.T, fs, window = rect,
                                                                       nfft=2048, noverlap = None)
      f_normal_i1, t_normal_i1, S_normal_i1 = signal.spectrogram(normal_i1.T, fs, window = rect,
                                                                 nfft=2048, noverlap = None)
      f_abnormal_i1, t_abnormal_i1, S_abnormal_i1 = signal.spectrogram(abnormal_i1.T, fs, window = rect,
                                                                       nfft=2048, noverlap = None)

      param_scipy_STFT = {"S_normal_a2": S_normal_a2,
            "S_abnormal_a2": S_abnormal_a2,
            "S_normal_i1": S_normal_i1,
            "S_abnormal_i1": S_abnormal_i1,
      }

      return param_scipy_STFT


def plot_STFT():

      axis_font = {'fontname': 'Arial', 'size': '12'}
      plt.rc('text', usetex=True)
      plt.rc('font', family='serif')

      plt.subplot(2, 2, 1)
      plt.pcolormesh(t_abnormal_a2, f_abnormal_a2, S_abnormal_a2, cmap='summer')
      plt.ylabel('Frequency [Hz]')
      plt.xlabel('Time[sec]')
      plt.colorbar()

      plt.subplot(2, 2, 2)
      plt.pcolormesh(t_normal_a2, f_normal_a2, S_normal_a2, cmap='summer')
      plt.ylabel('Frequency [Hz]')
      plt.xlabel('Time[sec]')
      plt.colorbar()

      plt.subplot(2, 2, 3)
      plt.pcolormesh(t_abnormal_i1, f_abnormal_i1, S_abnormal_i1, cmap='summer')
      plt.ylabel('Frequency [Hz]')
      plt.xlabel('Time[sec]')
      plt.colorbar()

      plt.subplot(2, 2, 4)
      plt.pcolormesh(t_normal_i1, f_normal_i1, S_normal_i1, cmap='summer')
      plt.ylabel('Frequency [Hz]')
      plt.xlabel('Time[sec]')
      plt.colorbar()

      plt.subplots_adjust(wspace = 0.5, hspace = 0.5)

      plt.show()




